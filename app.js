/* ===============================
   PhilosoApp ¬∑ app.js
   =============================== */

// ---------- Estado y utilidades ----------
const state = {
  unit: "I",
  totalScore: 0,
  gamesCompleted: 0,
  achievements: 0,
  portfolio: [], // entradas con: {date, unit, module, data}
  current: { module: null, timer: null, timeLeft: 0 },
};

// Persistencia
const STORAGE_KEY = "philosoapp_state_v1";
function save() { localStorage.setItem(STORAGE_KEY, JSON.stringify(state)); }
function load() {
  const raw = localStorage.getItem(STORAGE_KEY);
  if (!raw) return;
  try {
    const parsed = JSON.parse(raw);
    Object.assign(state, parsed);
    updateStats();
  } catch {}
}

// UI helpers
const $ = (sel) => document.querySelector(sel);
const $$ = (sel) => document.querySelectorAll(sel);
function toast(msg){
  const t = $("#toast");
  t.textContent = msg;
  t.classList.add("show");
  setTimeout(() => t.classList.remove("show"), 2200);
}
function achievement(text){
  const tray = $("#achievementsTray");
  const div = document.createElement("div");
  div.className = "achievement";
  div.textContent = "üèÜ " + text;
  tray.appendChild(div);
  setTimeout(() => div.remove(), 2600);
  state.achievements++;
  updateStats(); save();
}
function addScore(points){
  state.totalScore += points;
  updateStats(); save();
}
function updateStats(){
  $("#totalScore").textContent = state.totalScore;
  $("#gamesCompleted").textContent = state.gamesCompleted;
  $("#achievementsCount").textContent = state.achievements;
}
function showScreen(id){
  $$(".screen").forEach(s => s.classList.remove("active"));
  $(id).classList.add("active");
}

// Timers
function startTimer(seconds, onTick, onEnd){
  stopTimer();
  state.current.timeLeft = seconds;
  const el = $("#moduleTimer");
  const tick = () => {
    const mm = String(Math.floor(state.current.timeLeft/60)).padStart(2,"0");
    const ss = String(state.current.timeLeft%60).padStart(2,"0");
    el.textContent = `${mm}:${ss}`;
    el.classList.toggle("warning", state.current.timeLeft<=10);
    if (onTick) onTick(state.current.timeLeft);
    state.current.timeLeft--;
    if (state.current.timeLeft < 0){
      stopTimer();
      if (onEnd) onEnd();
    }
  };
  tick();
  state.current.timer = setInterval(tick, 1000);
}
function stopTimer(){
  if (state.current.timer){ clearInterval(state.current.timer); state.current.timer = null; }
  $("#moduleTimer").classList.remove("warning");
}

// Export/Import portafolio
$("#exportBtn").addEventListener("click", () => {
  const data = {
    meta: { app:"PhilosoApp", version:"1.0", exportedAt: new Date().toISOString() },
    state: { totalScore: state.totalScore, gamesCompleted: state.gamesCompleted, achievements: state.achievements },
    portfolio: state.portfolio
  };
  const blob = new Blob([JSON.stringify(data, null, 2)], { type: "application/json" });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url; a.download = "philosoapp_portafolio.json"; a.click();
  URL.revokeObjectURL(url);
});
$("#importInput").addEventListener("change", async (e) => {
  const f = e.target.files?.[0]; if(!f) return;
  try {
    const text = await f.text();
    const json = JSON.parse(text);
    if (Array.isArray(json.portfolio)) state.portfolio = json.portfolio;
    if (json.state){
      state.totalScore = json.state.totalScore ?? state.totalScore;
      state.gamesCompleted = json.state.gamesCompleted ?? state.gamesCompleted;
      state.achievements = json.state.achievements ?? state.achievements;
    }
    updateStats(); save();
    toast("Portafolio importado ‚úÖ");
  } catch {
    toast("Archivo inv√°lido ‚ùå");
  } finally {
    e.target.value = "";
  }
});

// ---------- Contenidos (resumenes por punto del plan) ----------
const content = {
  I: {
    objective: "Comprender qu√© es la filosof√≠a y reconocer su vigencia (arte, medios, IA).",
    readings: [
      { id:"I-1.1", title:"Etimolog√≠a y origen de 'filosof√≠a'",
        text:"Filosof√≠a proviene de philo (amor) y sophia (sabidur√≠a). Desde Pit√°goras, su sentido es buscar con rigor y humildad. No es acumular datos, sino examinar cr√≠ticamente las creencias.",
        warmups:["¬øQu√© diferencia hay entre 'saber algo' y 'amar saber'?", "Un ejemplo de hoy donde 'buscar razones' cambie una opini√≥n."],
      },
      { id:"I-1.2", title:"Est√©tica: ¬øQu√© hace bello algo?",
        text:"La est√©tica estudia el arte y la belleza. ¬øEs armon√≠a y proporci√≥n (cl√°sicos)? ¬øO depende de la cultura y el observador? Las redes amplifican gustos y tendencias.",
        warmups:["Nombr√° algo que te parece bello y por qu√©.", "¬øLas redes hacen que veamos la belleza de manera distinta?"],
      },
      { id:"I-1.3", title:"S√≥crates y la vida examinada",
        text:"S√≥crates pon√≠a preguntas para clarificar ideas. Su 's√≥lo s√© que no s√© nada' no es ignorancia, sino inicio del pensamiento: reconocer l√≠mites para avanzar.",
        warmups:["¬øQu√© pregunta socr√°tica har√≠as sobre '√©xito'?", "¬øUna creencia tuya que cambiaste tras dialogar?"],
      },
      { id:"I-1.4", title:"Plat√≥n: caverna y educaci√≥n",
        text:"La caverna simboliza confundir sombras con realidad. Educar es girar hacia la luz, incluso si al principio molesta. Hoy, ¬øcu√°les son nuestras cavernas?",
        warmups:["Ejemplo de 'sombra' informativa actual.", "¬øQu√© incomoda de 'salir' de esa caverna?"],
      },
      { id:"I-1.5", title:"Arist√≥teles: eudaimon√≠a y virtud",
        text:"La felicidad (eudaimon√≠a) es vivir bien y obrar bien. La virtud es h√°bito: punto medio entre extremos (valent√≠a entre temeridad y cobard√≠a).",
        warmups:["¬øQu√© h√°bito te acerca a tu mejor versi√≥n?", "Un 'justo medio' en tu vida."],
      },
      { id:"I-1.6", title:"Asombro, duda y l√≠mites",
        text:"El asombro despierta preguntas; la duda ordena el pensar. Las situaciones l√≠mite (enfermedad, injusticia) obligan a reconsiderar lo importante.",
        warmups:["Algo que te asombre hoy.", "¬øCu√°ndo la duda te ayud√≥?"],
      },
      { id:"I-1.7", title:"Medios y redes: verdad/apariencia",
        text:"Los medios construyen narrativas. Criterios: evidencia, fuentes, contexto. Evitar eco-c√°maras y sesgos de confirmaci√≥n es tarea filos√≥fica diaria.",
        warmups:["Un criterio tuyo para distinguir info confiable.", "¬øQu√© es una burbuja informativa?"],
      },
      { id:"I-1.8", title:"IA y filosof√≠a",
        text:"La IA plantea preguntas sobre conocimiento, sesgo, responsabilidad y autonom√≠a. El desaf√≠o: integrar datos con juicio humano, evitando deshumanizar decisiones.",
        warmups:["¬øQu√© decisi√≥n no delegar√≠as a una IA?", "Un posible sesgo algor√≠tmico y c√≥mo mitigarlo."],
      },
    ],
    socraticTopics: [
      { prompt:"¬øQu√© es la justicia hoy en redes sociales?",
        counter:"¬øLa regla de la mayor√≠a siempre es justa? ¬øY si la mayor√≠a desinforma?",
        seedRefs:["S√≥crates (di√°logo), Arist√≥teles (justo medio), Plat√≥n (ideas/verdad)"]
      },
      { prompt:"¬øLa belleza es objetiva o cultural?",
        counter:"Si todo es relativo, ¬øpor qu√© discutimos sobre arte? ¬øHay criterios compartidos?",
        seedRefs:["Est√©tica cl√°sica, relativismo cultural"]
      }
    ],
    quiz: [
      { q:"'Filosof√≠a' significa‚Ä¶", options:["Amor a la sabidur√≠a","Estudio de datos","Arte de debatir","Fe inquebrantable"], a:0,
        hint:"Etimolog√≠a griega: philo + sophia.", readId:"I-1.1" },
      { q:"Para Plat√≥n, 'la caverna' representa‚Ä¶", options:["El Hades","La democracia", "La confusi√≥n entre sombras y realidad","Un mito sobre h√©roes"], a:2,
        hint:"Educaci√≥n como giro hacia la luz.", readId:"I-1.4" },
    ],
    stories: [
      {
        id:"I-Caverna2025",
        title:"Salir de la Caverna (2025)",
        nodes:{
          start:{ text:"Ves un video viral con afirmaciones impactantes. Ten√©s 2 opciones:", choices:[
            {label:"Compartir ya", goto:"share"},
            {label:"Verificar fuentes", goto:"check"}
          ]},
          share:{ text:"Tus amigos lo comparten, pero aparece un desmentido. Consecuencia: perdiste confianza. ¬øAhora qu√©?",
            choices:[{label:"Rectificar p√∫blicamente", goto:"rectify"}, {label:"Ignorar y seguir", goto:"ignore"}]},
          check:{ text:"Encontraste datos inconsistentes. Aprendiste a usar verificadores. ¬øPublicar con contexto?",
            choices:[{label:"Publicar con contexto", goto:"context"}, {label:"No publicar", goto:"nopost"}]},
          rectify:{ text:"Gan√°s credibilidad por reconocer el error (virtud).", end:true },
          ignore:{ text:"Refuerzo de sombras (caverna). Aprendizaje: salir duele, pero vale.", end:true },
          context:{ text:"Aport√°s luz a tu comunidad. Educar es girar hacia lo real.", end:true },
          nopost:{ text:"Prudencia aristot√©lica. No todo merece difusi√≥n.", end:true }
        }
      }
    ],
    cards: [
      { term:"Asombro", back:"Origen del filosofar: admiraci√≥n ante el mundo." },
      { term:"Duda", back:"M√©todo para clarificar creencias y evidencias." },
      { term:"Eudaimon√≠a", back:"Felicidad como vida lograda (Arist√≥teles)." },
      { term:"Caverna", back:"Met√°fora de confundir apariencia con verdad (Plat√≥n)." },
      { term:"May√©utica", back:"Arte de parir ideas mediante preguntas (S√≥crates)." },
      { term:"Est√©tica", back:"Filosof√≠a del arte y la belleza." }
    ],
    dilemmas: [
      {
        id:"I-IA-Doc",
        scenario:"Una IA corrige ex√°menes m√°s r√°pido que docentes, pero muestra sesgos en ciertos grupos.",
        layerA:["Seguir us√°ndola","Desactivarla","Usarla solo como apoyo","Corregir sesgos y auditar"],
        layerB: "Marcos: Utilitarismo (resultado), Kant (dignidad), √âtica del cuidado (relaci√≥n), Pragmatismo (efectos).",
        map:["utilitarismo","deontolog√≠a","cuidado","pragmatismo"]
      }
    ]
  },

  II: {
    objective: "Explorar concepciones del ser humano: t√©cnica, s√≠mbolo, libertad y finitud.",
    readings: [
      { id:"II-2.1", title:"El humano como problema",
        text:"Nos interpretamos a nosotros mismos: no solo somos, sino que nos preguntamos qu√© somos.",
        warmups:["Definite en 5 palabras.", "¬øQu√© no cambia en vos cuando todo cambia?"]},
      { id:"II-2.5", title:"Marx: alienaci√≥n",
        text:"Alienaci√≥n: quedar separado del sentido de la propia actividad (trabajo como mercanc√≠a). Superarla exige praxis transformadora.",
        warmups:["Un ejemplo actual de alienaci√≥n.", "¬øQu√© te devuelve sentido?"]},
      { id:"II-2.6", title:"Nietzsche: superhombre",
        text:"Transvaloraci√≥n: crear valores propios. Cr√≠tica a la moral del reba√±o.",
        warmups:["¬øEn qu√© te gustar√≠a ‚Äòcrear‚Äô tus valores?", "Un riesgo de malentender ‚Äòsuperhombre‚Äô."]},
      { id:"II-2.10", title:"Cassirer: animal simb√≥lico",
        text:"Vivimos en redes de s√≠mbolos (lenguaje, mito, ciencia). Interpretar s√≠mbolos es vivir humanamente.",
        warmups:["Tu s√≠mbolo favorito y por qu√©.", "Redes sociales como ecosistema simb√≥lico."]},
      { id:"II-2.11", title:"Sartre: libertad y responsabilidad",
        text:"Estamos condenados a ser libres: elegir siempre, incluso no elegir. Responsabilidad por nuestros actos.",
        warmups:["Una elecci√≥n dif√≠cil y su porqu√©.", "¬øQu√© te hace libre hoy?"]},
      { id:"II-2.8", title:"Maliandi: animal t√©cnico",
        text:"La t√©cnica es ambivalente: potencia y riesgo. Requiere √©tica y prudencia.",
        warmups:["Un beneficio y un riesgo de una tech actual.", "¬øQu√© regla pondr√≠as para usarla mejor?"]},
      { id:"II-2.9", title:"Savater: ser mortal",
        text:"Aprender a vivir es aprender a morir: finitud que da urgencia y sentido.",
        warmups:["¬øQu√© har√≠as distinto si recordaras m√°s tu finitud?", "Una pr√°ctica que te humaniza."]},
      { id:"II-2.3", title:"Plat√≥n y Arist√≥teles: cuerpo y alma",
        text:"Plat√≥n (dualismo) vs Arist√≥teles (hilemorfismo: forma-materia).",
        warmups:["¬øSomos cuerpo+alma o unidad?", "Un ejemplo de integraci√≥n cuerpo-mente."]},
      { id:"II-2.7", title:"Descartes: duda existencial",
        text:"Dudo, luego pienso; pienso, luego existo: b√∫squeda de certeza.",
        warmups:["Algo ‚Äòindudable‚Äô para vos.", "¬øD√≥nde la duda te ayud√≥ a ser m√°s libre?"]},
      { id:"II-2.4", title:"Concepciones tradicionales del hombre",
        text:"De lo cl√°sico a lo contempor√°neo: m√∫ltiples visiones en di√°logo.",
        warmups:["¬øQu√© visi√≥n sent√≠s cercana?", "Una tensi√≥n entre visiones."]},
      { id:"II-2.2", title:"Vida, convivencia y muerte",
        text:"La convivencia exige reglas y cuidado; la muerte encuadra el sentido.",
        warmups:["Una regla justa para convivir mejor.", "Un rito que nos humaniza."]},
    ],
    socraticTopics: [
      { prompt:"¬øHay una ‚Äòesencia‚Äô humana o nos vamos haciendo?",
        counter:"Si todo es construcci√≥n, ¬øc√≥mo defend√©s derechos ‚Äòhumanos‚Äô universales?",
        seedRefs:["Sartre, Cassirer, Marx"]},
      { prompt:"¬øLa t√©cnica nos libera o nos aliena?",
        counter:"¬øDe qu√© depende? ¬øQu√© criterios √©ticos aplic√°s?",
        seedRefs:["Maliandi, Marx"]},
    ],
    quiz: [
      { q:"Para Cassirer, el ser humano es‚Ä¶", options:["Animal t√©cnico","Animal simb√≥lico","Animal racional","Animal pol√≠tico"], a:1,
        hint:"S√≠mbolo: lenguaje, mito, ciencia.", readId:"II-2.10" },
      { q:"Sartre destaca la‚Ä¶", options:["Determinaci√≥n biol√≥gica","Falta de libertad","Libertad y responsabilidad","Fe como certeza"], a:2,
        hint:"Condenados a ser libres.", readId:"II-2.11" },
    ],
    stories: [
      {
        id:"II-TecnicaSentido",
        title:"Tecnolog√≠a y sentido",
        nodes:{
          start:{ text:"Tu escuela adopta vigilancia por c√°maras con IA. ¬øQu√© hac√©s?",
            choices:[{label:"Apoyar por seguridad", goto:"pro"},{label:"Cuestionar por privacidad", goto:"contra"}]},
          pro:{ text:"Se reducen conflictos, pero aparecen falsos positivos. ¬øPropon√©s auditor√≠a √©tica?", choices:[
            {label:"S√≠, auditor√≠a y transparencia", goto:"audit"},
            {label:"No, conf√≠o en el sistema", goto:"trust"}]},
          contra:{ text:"Logr√°s abrir debate: derechos vs seguridad. ¬øPropon√©s alternativa?",
            choices:[{label:"Pol√≠tica clara de datos", goto:"policy"},{label:"Rechazo total", goto:"reject"}]},
          audit:{ text:"Criterio t√©cnico + √©tico (Maliandi).", end:true },
          trust:{ text:"Riesgo de alienaci√≥n por delegar juicio.", end:true },
          policy:{ text:"Enfoque simb√≥lico y normativo (Cassirer + convivencia).", end:true },
          reject:{ text:"Pierde matices y mejoras posibles.", end:true }
        }
      }
    ],
    cards: [
      { term:"Alienaci√≥n (Marx)", back:"Separaci√≥n del sentido del trabajo o producto." },
      { term:"Superhombre (Nietzsche)", back:"Crear valores propios, no reba√±o." },
      { term:"Animal simb√≥lico (Cassirer)", back:"Vivimos en redes de s√≠mbolos." },
      { term:"Libertad (Sartre)", back:"Elegir siempre implica responsabilidad." },
      { term:"Animal t√©cnico (Maliandi)", back:"T√©cnica ambivalente: potencia y riesgo." },
      { term:"Hilemorfismo", back:"Unidad forma-materia (Arist√≥teles)." },
    ],
    dilemmas: [
      {
        id:"II-Genes",
        scenario:"Editar genes para ‚Äòmejorar‚Äô capacidades humanas.",
        layerA:["S√≠, si reduce sufrimiento","No, viola dignidad","Depende: casos y l√≠mites","Solo terap√©utico, no ‚Äòmejora‚Äô"],
        layerB:"Marcos: Utilitarismo (reducir sufrimiento), Kant (dignidad), √âtica del cuidado (relaciones), Prudencia/virtudes (Arist√≥teles).",
        map:["utilitarismo","deontolog√≠a","cuidado","virtudes"]
      }
    ]
  },

  III: {
    objective: "Aplicar marcos √©ticos (virtudes, utilitarismo, deber, pragmatismo, cuidado) a casos reales e IA.",
    readings: [
      { id:"III-3.1", title:"Problemas √©ticos",
        text:"Dilemas reales requieren evaluar hechos, principios y consecuencias.",
        warmups:["Un dilema que te importe.", "¬øQu√© datos faltan antes de decidir?"]},
      { id:"III-3.2", title:"√âtica y moral",
        text:"Moral: normas y costumbres. √âtica: reflexi√≥n cr√≠tica sobre ellas.",
        warmups:["Norma que cuestion√°s y por qu√©.", "Un criterio √©tico personal."]},
      { id:"III-3.3", title:"Arist√≥teles: virtud y felicidad",
        text:"Lo bueno es vivir bien practicando virtudes, hallando el justo medio.",
        warmups:["Una virtud que entren√°s.", "Un exceso que evit√°s."]},
      { id:"III-3.4", title:"Hedonismo",
        text:"Placer como fin: ¬øsiempre deseable? ¬øTodos los placeres valen igual?",
        warmups:["Un placer valioso y uno vac√≠o.", "Criterio para distinguirlos."]},
      { id:"III-3.5", title:"Utilitarismo (Mill)",
        text:"Lo bueno es lo √∫til: mayor felicidad para el mayor n√∫mero, con calidad de placeres.",
        warmups:["Un caso donde el total importa.", "Riesgo del c√°lculo utilitarista."]},
      { id:"III-3.6", title:"Pragmatismo",
        text:"Verdad por efectos pr√°cticos: funciona = verdadero (con l√≠mites).",
        warmups:["Algo ‚Äòverdadero‚Äô porque funciona.", "Un l√≠mite del ‚Äòfunciona‚Äô."]},
      { id:"III-3.7", title:"Kant: deber",
        text:"Actuar por deber y universalizar la m√°xima; dignidad humana, no usar como medio.",
        warmups:["Una regla que universalizar√≠as.", "Un caso donde el fin no justifica medios."]},
      { id:"III-3.8", title:"Antropocentrismo",
        text:"Centrar la √©tica en el humano: ¬øy el ambiente? ¬ølos animales? ¬øla IA?",
        warmups:["Una regla para no-humanos.", "¬øQui√©n cuenta en el ‚Äòc√°lculo moral‚Äô?"]},
      { id:"III-3.9", title:"IA: responsabilidad",
        text:"Explicabilidad, sesgo, accountability: decisiones h√≠bridas humano-m√°quina.",
        warmups:["Qu√© exigir√≠as a una IA ‚Äò√©tica‚Äô.", "Un caso donde no usar√≠as IA."]},
    ],
    socraticTopics: [
      { prompt:"¬øLos fines justifican los medios en IA educativa?",
        counter:"Si violamos dignidad, ¬øvale el ‚Äòbeneficio‚Äô?",
        seedRefs:["Kant, utilitarismo, cuidado"]},
    ],
    quiz: [
      { q:"Para Kant, lo moralmente bueno es‚Ä¶", options:["Lo que produce placer","Lo que es √∫til","Lo que se hace por deber","Lo que funciona"], a:2,
        hint:"Deber y universalizaci√≥n de la m√°xima.", readId:"III-3.7" },
      { q:"Mill propone que lo bueno es‚Ä¶", options:["La felicidad del mayor n√∫mero","El deber","El justo medio","La fe"], a:0,
        hint:"Utilidad/placer cualitativo.", readId:"III-3.5" },
    ],
    stories: [
      {
        id:"III-IA-Califica",
        title:"¬øIA que califica tareas?",
        nodes:{
          start:{ text:"Una IA corrige composiciones. Ahorra tiempo, pero erra con dialectos.",
            choices:[{label:"Usarla con revisi√≥n humana", goto:"hybrid"},{label:"Prohibirla", goto:"ban"}]},
          hybrid:{ text:"Responsabilidad compartida (pragmatismo + dignidad).", end:true },
          ban:{ text:"Pierde eficiencia; quiz√° alternativa mejorable.", end:true }
        }
      }
    ],
    cards: [
      { term:"Virtud", back:"Disposici√≥n adquirida a obrar bien (Arist√≥teles)." },
      { term:"Utilidad", back:"Lo que maximiza felicidad total (Mill)." },
      { term:"Deber", back:"Actuar por respeto a la ley moral (Kant)." },
      { term:"Pragmatismo", back:"Verdad por efectos pr√°cticos (con evaluaci√≥n)." },
      { term:"Cuidado", back:"Relaciones y contextos importan." },
      { term:"Antropocentrismo", back:"Centrar lo moral en humanos (en debate)." },
    ],
    dilemmas: [
      {
        id:"III-Trolley",
        scenario:"Tren sin frenos: desviar y causar 1 muerte para salvar 5.",
        layerA:["Desviar","No intervenir","Buscar alternativa","Par√°lisis"],
        layerB:"Marcos: Utilitarismo (total), Deontolog√≠a (no matar), Cuidado (relaci√≥n), Virtudes (prudencia).",
        map:["utilitarismo","deontolog√≠a","cuidado","virtudes"]
      }
    ]
  }
};

// ---------- Navegaci√≥n b√°sica ----------
$("#unitSelect").addEventListener("change", (e)=>{
  state.unit = e.target.value;
  save();
  toast(`Unidad ${state.unit} seleccionada`);
});

$("#backBtn").addEventListener("click", ()=>{
  stopTimer();
  showScreen("#mainScreen");
  state.current.module = null;
});

// Men√∫
$$(".game-card").forEach(btn=>{
  btn.addEventListener("click", ()=>{
    const mod = btn.getAttribute("data-game");
    launchModule(mod);
  });
});

// ---------- Lanzador de m√≥dulos ----------
function launchModule(name){
  stopTimer();
  state.current.module = name;
  const unit = content[state.unit];

  const titleMap = {
    reading: "Lectura & Reflexi√≥n",
    socratic: "Debate Socr√°tico",
    dilemmas: "Dilemas √âticos",
    stories: "Historias Ramificadas",
    cards: "Cartas de Conceptos",
    quiz: "Quiz con Pistas",
  };

  $("#moduleTitle").textContent = `${titleMap[name]} ‚Ä¢ Unidad ${state.unit}`;
  $("#moduleObjective").textContent = unit.objective;
  $("#moduleBody").innerHTML = "";
  $("#moduleFooter").innerHTML = "";
  showScreen("#moduleScreen");

  const map = {
    reading: moduleReading,
    socratic: moduleSocratic,
    dilemmas: moduleDilemmas,
    stories: moduleStories,
    cards: moduleCards,
    quiz: moduleQuiz
  };
  map[name](unit);
}

// ---------- M√≥dulos ----------

// 1) Lectura & Reflexi√≥n (2‚Äì3 min)
function moduleReading(unit){
  const entry = pick(unit.readings);
  const body = $("#moduleBody");
  body.innerHTML = `
    <h3>${entry.title}</h3>
    <div class="progress" aria-hidden="true"><span id="progressBar" style="width:0%"></span></div>
    <p>${entry.text}</p>
    <p class="inline-note"><strong>Antes de responder:</strong> marc√° 3 ideas clave y dej√° 1 pregunta abierta.</p>
    <div class="controls">
      <input aria-label="Idea 1" class="input" placeholder="Idea clave 1">
      <input aria-label="Idea 2" class="input" placeholder="Idea clave 2">
      <input aria-label="Idea 3" class="input" placeholder="Idea clave 3">
      <textarea aria-label="Pregunta abierta" placeholder="Mi pregunta sobre el texto"></textarea>
    </div>
  `;
  const footer = $("#moduleFooter");
  const btn = document.createElement("button");
  btn.className = "btn";
  btn.textContent = "Guardar reflexi√≥n";
  btn.addEventListener("click", ()=>{
    addScore(60);
    state.gamesCompleted++;
    achievement("Lectura completada");
    state.portfolio.push({
      date: new Date().toISOString(),
      unit: state.unit,
      module:"reading",
      data:{ id:entry.id, title:entry.title }
    });
    save();
    toast("Reflexi√≥n guardada ‚úÖ");
  });
  footer.appendChild(btn);

  startTimer(3*60, (t)=>{
    const done = Math.min(100, Math.round(((3*60 - t)/(3*60))*100));
    $("#progressBar").style.width = done + "%";
  }, ()=>{
    toast("Tiempo de lectura finalizado ‚è≥");
  });
}

// 2) Debate Socr√°tico (6‚Äì8 min)
function moduleSocratic(unit){
  const topic = pick(unit.socraticTopics);
  const body = $("#moduleBody");
  body.innerHTML = `
    <h3>Pregunta gu√≠a</h3>
    <p><strong>${topic.prompt}</strong></p>

    <h4>Hip√≥tesis inicial</h4>
    <textarea id="hypothesis" class="input" placeholder="Escrib√≠ tu postura inicial (2-3 frases)"></textarea>

    <h4>Preguntas socr√°ticas</h4>
    <ol>
      <li><em>Clarificar:</em> ¬øQu√© entend√©s por los t√©rminos clave?</li>
      <li><em>Evidencias:</em> ¬øQu√© ejemplos o datos sostienen tu idea?</li>
      <li><em>Contraejemplos:</em> ¬øHay casos donde tu postura falle?</li>
      <li><em>Consecuencias:</em> Si esto fuera verdad, ¬øqu√© seguir√≠a?</li>
    </ol>

    <div class="controls" style="margin-top:8px;">
      <textarea id="answers" class="input" placeholder="Respond√© brevemente a las 4 preguntas"></textarea>
    </div>

    <h4>Objeci√≥n</h4>
    <p class="inline-note">Socrates: ${topic.counter}</p>

    <h4>Revisi√≥n de postura</h4>
    <textarea id="revision" class="input" placeholder="¬øCambi√°s algo? ¬øPor qu√©?"></textarea>

    <p class="inline-note">Citas/semillas: ${topic.seedRefs.join(" ¬∑ ")}</p>
  `;
  const footer = $("#moduleFooter");
  const btn = document.createElement("button");
  btn.className="btn";
  btn.textContent="Registrar debate";
  btn.addEventListener("click", ()=>{
    const changed = ($("#revision").value.trim().length > 0);
    addScore(changed?120:90);
    if (changed) achievement("Cambio razonado");
    state.gamesCompleted++;
    state.portfolio.push({
      date:new Date().toISOString(), unit: state.unit, module:"socratic",
      data:{ prompt: topic.prompt, changed }
    });
    save(); toast("Debate registrado ‚úÖ");
  });
  footer.appendChild(btn);

  startTimer(8*60, null, ()=> toast("Tiempo de debate finalizado ‚è≥"));
}

// 3) Dilemas √âticos (capas) ~7 min
function moduleDilemmas(unit){
  const d = pick(unit.dilemmas);
  const body = $("#moduleBody");
  body.innerHTML = `
    <h3>Dilema</h3>
    <p><strong>${d.scenario}</strong></p>
    <div class="progress" aria-hidden="true"><span id="progressBar" style="width:0%"></span></div>

    <h4>Capa A ¬∑ Decisi√≥n inmediata</h4>
    <div id="layerA" class="controls"></div>

    <div id="layerB" style="display:none; margin-top:12px;">
      <h4>Capa B ¬∑ Relectura guiada</h4>
      <p>${d.layerB}</p>
      <button class="btn-secondary" id="toLayerC">Continuar</button>
    </div>

    <div id="layerC" style="display:none; margin-top:12px;">
      <h4>Capa C ¬∑ Re-decisi√≥n y justificaci√≥n</h4>
      <p>Volv√© a decidir (pod√©s cambiar) y justific√° en 2‚Äì3 frases.</p>
      <div class="controls">
        <select id="finalChoice"></select>
        <textarea id="finalWhy" class="input" placeholder="Mi justificaci√≥n‚Ä¶"></textarea>
      </div>
      <p class="inline-note">Mapa de corrientes sugerido: ${d.map.join(" ¬∑ ")}</p>
    </div>
  `;

  // Capa A
  const a = $("#layerA");
  d.layerA.forEach((opt, i)=>{
    const b = document.createElement("button");
    b.className="btn-secondary";
    b.textContent = opt;
    b.addEventListener("click", ()=>{
      a.querySelectorAll("button").forEach(x=>x.disabled=true);
      a.dataset.choice = i;
      $("#layerB").style.display="block";
      addScore(20);
    });
    a.appendChild(b);
  });

  // Capa B -> C
  $("#toLayerC").addEventListener("click", ()=>{
    const sel = $("#finalChoice");
    sel.innerHTML = "";
    d.layerA.forEach((opt, i)=>{
      const o = document.createElement("option");
      o.value = i; o.textContent = opt; sel.appendChild(o);
    });
    $("#layerC").style.display="block";
    addScore(20);
  });

  // Footer guardar
  const footer = $("#moduleFooter");
  const saveBtn = document.createElement("button");
  saveBtn.className="btn";
  saveBtn.textContent="Guardar dilema";
  saveBtn.addEventListener("click", ()=>{
    const first = Number(a.dataset.choice ?? -1);
    const final = Number($("#finalChoice").value ?? -1);
    const why = $("#finalWhy").value.trim();
    const changed = (first !== final);

    addScore(changed?120:90);
    if (changed) achievement("Apertura cr√≠tica");

    state.gamesCompleted++;
    state.portfolio.push({
      date:new Date().toISOString(), unit: state.unit, module:"dilemmas",
      data:{ id:d.id, first, final, changed, why }
    });
    save(); toast("Dilema guardado ‚úÖ");
  });
  footer.appendChild(saveBtn);

  startTimer(7*60, (t)=>{
    const done = Math.min(100, Math.round(((7*60 - t)/(7*60))*100));
    $("#progressBar").style.width = done + "%";
  }, ()=> toast("Tiempo del dilema finalizado ‚è≥"));
}

// 4) Historias Ramificadas (8‚Äì10 min)
function moduleStories(unit){
  const story = pick(unit.stories);
  const body = $("#moduleBody");
  let current = "start";
  const render = ()=>{
    const node = story.nodes[current];
    const html = `
      <h3>${story.title}</h3>
      <p>${node.text}</p>
      <div class="controls" id="choices"></div>
    `;
    body.innerHTML = html;
    const c = $("#choices");
    if (node.end){
      const done = document.createElement("button");
      done.className="btn";
      done.textContent="Registrar historia";
      done.addEventListener("click", ()=>{
        addScore(100);
        state.gamesCompleted++;
        achievement("Historia completada");
        state.portfolio.push({
          date:new Date().toISOString(), unit: state.unit, module:"stories",
          data:{ id: story.id, end: current }
        });
        save(); toast("Ruta registrada ‚úÖ");
      });
      c.appendChild(done);
      return;
    }
    node.choices.forEach(ch=>{
      const b = document.createElement("button");
      b.className="btn-secondary";
      b.textContent = ch.label;
      b.addEventListener("click", ()=>{ current = ch.goto; render(); addScore(15); });
      c.appendChild(b);
    });
  };
  render();
  startTimer(10*60, null, ()=> toast("Tiempo de historia finalizado ‚è≥"));
}

// 5) Cartas de Conceptos (3‚Äì5 min)
function moduleCards(unit){
  const sample = unit.cards.slice(0,6);
  const body = $("#moduleBody");
  const grid = document.createElement("div");
  grid.className="card-grid";

  sample.forEach(card=>{
    const wrap = document.createElement("div");
    wrap.className="flip-card"; wrap.tabIndex=0; wrap.setAttribute("role","button");
    wrap.setAttribute("aria-label", `Carta ${card.term}. Activar para ver explicaci√≥n.`);
    wrap.addEventListener("click", ()=> wrap.classList.toggle("flipped"));
    wrap.addEventListener("keypress", (e)=>{ if(e.key==="Enter"||e.key===" "){ e.preventDefault(); wrap.click(); }});
    wrap.innerHTML = `
      <div class="flip-card-inner">
        <div class="flip-face">
          <h4>${card.term}</h4>
          <p class="inline-note">Dec√≠ con tus palabras qu√© significa.</p>
        </div>
        <div class="flip-face flip-back">
          <strong>${card.term}</strong>
          <p>${card.back}</p>
        </div>
      </div>
    `;
    grid.appendChild(wrap);
  });

  body.innerHTML = `<h3>Cartas de conceptos</h3>
    <p class="inline-note">Consejo: explic√° en voz alta antes de voltear.</p>`;
  body.appendChild(grid);

  const footer = $("#moduleFooter");
  const btn = document.createElement("button");
  btn.className="btn";
  btn.textContent="Registrar pr√°ctica";
  btn.addEventListener("click", ()=>{
    addScore(70); state.gamesCompleted++;
    state.portfolio.push({ date:new Date().toISOString(), unit: state.unit, module:"cards", data:{count: sample.length}});
    save(); toast("Pr√°ctica registrada ‚úÖ");
  });
  footer.appendChild(btn);

  startTimer(5*60, null, ()=> toast("Tiempo de cartas finalizado ‚è≥"));
}

// 6) Quiz con Pistas (6‚Äì8 min total; 90s por √≠tem)
function moduleQuiz(unit){
  const qs = unit.quiz.slice(); // copia
  let idx = 0, usedHint = false;
  const body = $("#moduleBody");
  const footer = $("#moduleFooter");

  function render(){
    if (idx >= qs.length){
      achievement("Quiz completado");
      state.gamesCompleted++; save();
      body.innerHTML = `<h3>¬°Listo!</h3><p>Completaste el quiz de la Unidad ${state.unit}.</p>`;
      footer.innerHTML = "";
      return;
    }
    usedHint = false;
    const q = qs[idx];
    const reading = findReadingById(unit, q.readId);
    body.innerHTML = `
      <div class="progress" aria-hidden="true"><span id="progressBar" style="width:${Math.round((idx/qs.length)*100)}%"></span></div>
      <h3>Pregunta ${idx+1} de ${qs.length}</h3>
      <p><strong>${q.q}</strong></p>
      <div id="options" class="controls"></div>
      <button id="hintBtn" class="btn-secondary">Ver pista / leer antes</button>
      <div id="hintBox" class="module-body" style="display:none; margin-top:10px;">
        <h4>Pista</h4>
        <p>${q.hint}</p>
        ${reading ? `<h5>Lectura relacionada: ${reading.title}</h5><p>${reading.text}</p>` : ""}
      </div>
    `;
    const opts = $("#options");
    q.options.forEach((opt,i)=>{
      const b = document.createElement("button");
      b.className="btn-secondary";
      b.textContent = opt;
      b.addEventListener("click", ()=> answer(i));
      opts.appendChild(b);
    });
    $("#hintBtn").onclick = ()=>{
      $("#hintBox").style.display="block";
      usedHint = true;
    };

    // timer por pregunta
    startTimer(90, (t)=>{
      const done = Math.min(100, Math.round(((90 - t)/90)*100));
      $("#progressBar").style.width = done + "%";
    }, ()=> { answer(-1); });
  }

  function answer(i){
    stopTimer();
    const q = qs[idx];
    const ok = (i === q.a);
    addScore(ok ? (usedHint?40:70) : 10);
    if(ok && !usedHint) achievement("Respuesta precisa sin pista");
    toast(ok ? "¬°Correcto!" : "Para revisar üîÅ");

    idx++; render();
  }

  render();
}

// helpers
function pick(arr){ return arr[Math.floor(Math.random()*arr.length)] }
function findReadingById(unit, id){ return unit.readings.find(r=>r.id===id); }

// ---------- Inicio ----------
document.addEventListener("DOMContentLoaded", ()=>{
  load();
  showScreen("#mainScreen");
  // Mensaje de bienvenida (una vez)
  if ((state.totalScore ?? 0) === 0){
    setTimeout(()=> toast("Bienvenido a PhilosoApp ‚ú®"), 600);
  }
});
